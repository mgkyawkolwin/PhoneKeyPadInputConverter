name: Create Release

on:
    workflow_dispatch: # run manually from GitHub Actions tab
      inputs:
        tag_name:
          description: 'Please input Tag name!'
          required: true
          type: string
        release_name:
          description: 'Please input Release name'
          required: true
          type: string

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./

  # Path to the test profile file relative to the root of the project.
  TEST_FILE_PATH: ./src/Tests/UnitTests/

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: write


jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: ['9.0.x' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Create TestResults directory
      run: mkdir -p TestResults

    - name: Build
      # working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag_name }}  # Use the manually provided tag name
        release_name: Release ${{ github.event.inputs.release_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./src/InputConverters/bin/Release/net9.0/InputConverters.dll
        asset_name: InputConverters.dll
        asset_content_type: application/dll

    - name: Upload Second DLL
      id: upload-release-asset-2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # URL from the create-release step
        asset_path: ./src/BasicConverters/bin/Release/net9.0/BasicConverters.dll
        asset_name: BasicConverters.dll
        asset_content_type: application/dll